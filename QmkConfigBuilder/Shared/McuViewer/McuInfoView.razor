@using QmkConfigBuilder.Models.MCU
@using QmkConfigBuilder.Models.MCU.Definitions.Pinout;
@using QmkConfigBuilder.Models.MCU.Definitions.Pinout.PinDefinitions.General.I2C;
@using QmkConfigBuilder.Shared.Common;
@using QmkConfigBuilder.Shared.MatrixEditor;
@inherits ComponentBase

<LabeledCard Label="MCU Info">
    <RadzenStack Orientation="Orientation.Vertical">
        <RadzenDropDown Data=@this.McuList TValue="IControllerUnit" @bind-Value="@this.BoundMcuValue" TextProperty="Name" Disabled="@this.Disabled" />
        <LabeledSwitch Label="Show Alternate Pin Functions" @bind-Value="@this.BoundVisibleValue" Disabled="@this.Disabled" />
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End">
            <RadzenLink Path="@this.BoundMcuValue.ReferenceUrl" Icon="open_in_new" Text="Reference" Target="_blank" />
        </RadzenStack>
    </RadzenStack>
</LabeledCard>

@code {
    [Parameter]
    public IControllerUnit SelectedMcu { get; set; } = default!;
    [Parameter]
    public EventCallback<IControllerUnit> SelectedMcuChanged { get; set; }

    [Parameter]
    public bool VisibleAlternatePins { get; set; } = false;
    [Parameter]
    public EventCallback<bool> VisibleAlternatePinsChanged { get; set; }

    [Parameter]
    public bool Disabled { get; set; } = false;

    private IControllerUnit BoundMcuValue
    {
        get => this.SelectedMcu;
        set => this.SelectedMcuChanged.InvokeAsync(value);
    }

    private bool BoundVisibleValue
    {
        get => this.VisibleAlternatePins;
        set => this.VisibleAlternatePinsChanged.InvokeAsync(value);
    }

    private readonly IReadOnlyCollection<IControllerUnit> McuList = new List<IControllerUnit>
    {
        new ProMicro(),
        new RaspberryPiPico(),
        new ATmega32U4(),
        new RP2040(),
    };
}
